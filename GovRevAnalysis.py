import pandas as pd
import numpy as np

# importing data from csv files downloaded from survey outlined in the write up
govData = pd.read_csv('Traffic Data.csv')
govRev = pd.read_csv('GovDollarFine.csv')

# Dataframe of local govs percent of total revenue from traffic fines across different thresholds
df = pd.DataFrame(govData)
# replacing the empty values represented by - in dataset replace with 0
df = df.replace('-', 0)
# setting column names
df.columns = ['State', 'Over 10%', 'Over 20%', 'Over 30%', 'Over 50%']

# converting data type object to int so operations can be performed on column values
df['Over 20%'] = pd.to_numeric(df['Over 20%'])
df['Over 30%'] = pd.to_numeric(df['Over 30%'])
df['Over 50%'] = pd.to_numeric(df['Over 50%'])

# calculating total number of states that operate within the limits of the columns
sum_10 = df['Over 10%'].sum(axis=0)
sum_20 = df['Over 20%'].sum(axis=0)
sum_30 = df['Over 30%'].sum(axis=0)
sum_50 = df['Over 50%'].sum(axis=0)
total_govs = sum_10 + sum_20 + sum_30 + sum_50

# percentage of states that reported operate within each limit
perc_10 = sum_10 / total_govs
perc_20 = sum_20 / total_govs
perc_30 = sum_30 / total_govs
perc_50 = sum_50 / total_govs
print(perc_10, perc_20, perc_30, perc_50)

# Dataframe of local gov revenue generated from different thresholds of ticket prices
df2 = pd.DataFrame(govRev)
# replace empty values represented by dash with zeros
df2 = df2.replace('-', 0)
df2.columns = ['State', 'Over $100', 'Over $200', 'Over $300', 'Over $500']

# converting object types to ints so operations can be performed
df2['Over $200'] = pd.to_numeric(df2['Over $200'])
df2['Over $300'] = pd.to_numeric(df2['Over $300'])
df2['Over $500'] = pd.to_numeric(df2['Over $500'])

# evaluating the rev generated from ticketing by state
# extracting the number of tickets given between the ranges in the data set
tot_100 = (df2['Over $100'].sum(axis=0, skipna=True))
tot_200 = (df2['Over $200'].sum(axis=0, skipna=True))
tot_300 = (df2['Over $300'].sum(axis=0, skipna=True))
tot_500 = (df2['Over $500'].sum(axis=0, skipna=True))
print(tot_100 + tot_200 + tot_300 + tot_500)

# outputting random total numeric amount of revenue generated by these tickets
rev_100 = np.random.randint(100,200,tot_100)
rev_200 = np.random.randint(201,300,tot_200)
rev_300 = np.random.randint(301,500, tot_300)
rev_500 = np.random.randint(500,1000,tot_500)

# function that sums the values produced in the random number generator above
def find_total(revenue):
    total_rev = 0
    for i in revenue:
        total_rev += i
    return total_rev

# estimated total of revenue for the number states that participated in survey
total_rev = float(find_total(rev_100) + find_total(rev_200) + find_total(rev_300) + find_total(rev_500))

# evaluating effects of autonomous vehicle adoption - research explained in write up
# creating a function - growth rate of AV, new cars sold, old - cars scrapped each year, total - current cars on the road
def autonomous_growth(base_growth, rate, new_cars,scrapped, total_cars):
    base_av = base_growth * new_cars
    base_av_perc = base_av / new_cars
    perc_av_tot = base_av_perc / (total_cars - scrapped)

    years = 0
    total_avs = base_av
    # finding the amount of years until 100% of new cars are AVs and how many cars will be on the road at that point
    while rate < 1:
        rate += (rate * base_growth) + base_growth
        total_avs += rate * new_cars
        years += 1

    # from the point of 100% new cars being AVs roughly how many additional years until all cars are AVs
    while total_avs < total_cars:
        total_avs += new_cars
        years += 1

    return years, total_avs

# generate random growth rates between min and max thresholds 100 times
rand_rate = np.random.uniform(.005, .015, 100)
for i in rand_rate:
    # output function return with different growth rates to get an estimate of years to full adoption and estimated number of cars on the road
    print(autonomous_growth(.03, i, 17*10**6, 12*10**6, 246*10**6))

# effects on government revenue
def rev_reduc(base_growth, rate):
    gov_rev = total_rev
    base_growth = base_growth
    base_reduct = gov_rev - (base_growth*gov_rev)
    gov_rev = base_reduct
    years = 0
    rate = rate
    new_rate = 0
    while gov_rev > 0:
        new_rate += (rate*base_growth) + base_growth
        gov_rev -= new_rate * gov_rev
        years += 1
    return years, gov_rev, new_rate

for i in randrate:
	print(rev_reduc(0.03, i))
